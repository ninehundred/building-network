pres = 1e-10
# un_rm = set_precision(un_rm, pres)
# un_dr = set_precision(un_dr, pres)


# plot_multipoly(un_rm, plt)
# plot_multipoly(un_dr, plt)

# nonoverlap = (un_rm.symmetric_difference(un_dr))
# a = un_rm.difference(un_dr).symmetric_difference(un_rm)
# b = un_dr.difference(un_rm)
# c = un_dr.difference(un_rm)

# un = set_precision(un, pres)
# print(type(un))
# d = 0.1
# cf = 1.3
# p = un.buffer(-d).buffer(d*cf).intersection(un).simplify(d)

# rooms = []
# doors = []
# for room in rooms_s:
#     rooms.append(shapely.wkt.loads(room))
# for door in doors_s:
#     doors.append(shapely.wkt.loads(door))
# print(rooms)
# print(doors)


    for room in enumerate(building.rooms):
        if room[1].level == level:

            coordinates = room[1].coordinates
            # check for intersecting door here
            door_centroid = []
            for door in building.doors:
                if room[1].polygon.intersects(door.polygon):
                    door_centroid.append(door.centroid[0])
                    door_centroid.append(door.centroid[1])
                    break

            # calculate furthest point from door

            curr_distance = 0.0
            furthest_point_index = 0

            for coordinate in enumerate(coordinates):
                distance = calculate_distance(coordinate[1], door_centroid)

                if distance > curr_distance:
                    curr_distance = distance
                    furthest_point_index = coordinate[0]

            for coordinate in enumerate(coordinates):
                if coordinate[0] == furthest_point_index:
                    start_nodes.append(str(room[1].number) + str(coordinate[0]))
                    graph.add_node(str(room[1].number) + str(coordinate[0]), pos=(coordinate[1]), id=room[1].number, start=True, color="green")
                else:
                    graph.add_node(str(room[1].number) + str(coordinate[0]), pos=(coordinate[1]), id=room[1].number, start=False, color="blue")
